generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  password      String? // null for OAuth
  name          String
  role          Role         @default(USER)
  provider      AuthProvider @default(CREDENTIALS)
  emailVerified Boolean      @default(false)
  refreshToken  String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  orders    Order[]
  cart      Cart?
  addresses Address[]
  coupons   UserCoupon[]
}

enum Role {
  USER
  ADMIN
}

enum AuthProvider {
  CREDENTIALS
  GOOGLE
  GITHUB
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String
  slug        String         @unique
  price       Float
  stock       Int
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  String
  images      ProductImage[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  orderItems OrderItem[]
  CartItem   CartItem[]
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int     @default(1)
}

model Order {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  items     OrderItem[]
  total     Decimal     @db.Decimal(10, 2)
  status    OrderStatus @default(PENDING)
  payment   Payment?
  address   Address?    @relation(fields: [addressId], references: [id])
  addressId String?
  createdAt DateTime    @default(now())
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model Payment {
  id            String        @id @default(uuid())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  paymentMethod String
  paymentId     String // Stripe session ID or txn ID
  createdAt     DateTime      @default(now())
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

model Address {
  id         String  @id @default(uuid())
  user       User    @relation(fields: [userId], references: [id])
  userId     String
  fullName   String
  phone      String
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean @default(false)
  Order      Order[]
}

model Coupon {
  id        String       @id @default(uuid())
  code      String       @unique
  discount  Int // percentage
  expiresAt DateTime
  users     UserCoupon[]
}

model UserCoupon {
  id       String  @id @default(uuid())
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  coupon   Coupon  @relation(fields: [couponId], references: [id])
  couponId String
  used     Boolean @default(false)
}
