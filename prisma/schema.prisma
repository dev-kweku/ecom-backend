// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id  String  @id @default(uuid())
  email String @unique
  password  String?
  name  String
  role  //get role  @default(USER)//user is enum
  provider  AuthProvider @default(CREDENTIALS) //enum
  emailVerified Boolean @default(false)
  refreshToken String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders  Order[]
  cart Cart?
  addresses Address[]
  coupon  UserCoupon[]
}     

enum Role{
  USER
  ADMIN
}


enum AuthProvider{
  CREDENTIALS
  GOOGLE
  GITHUB
}

model Product{
  id String @id @default(uuid())
  name String
  description String
  price Decimal @db.Decimal(10,2)
  stock Int 
  category Category @relation(fields:[categoryId],references:[id])
  categoryId String
  images ProductImage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems orderItem[]
}

model Category{
  id String  @id @default(uuid())
  name String @unique
  products Product[]
}

model ProductImage{
  id String  @id @degault(uuid())
  url String 
  product Product @relation(fields:[productId],references:[id])
  productId String
}

model Cart{
  id String @id @default(uuid())
  user User @relation(fields:[userId],references:[id])
  userId String @unique
  items CartItem[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model CartItem{
  id String @id @default(uuid())
  cart Cart @relation(fields:[cartId],references:[id])
  cartId String
  product Product @relation(fields:[productId],references:[id])
  productId String
  quantity Int  @default(1)
}

model Order{
  id String @id @default(uuid())
  user User @relation(fields:[userId,references:[id]])
  userId String
  Items orderItem[]
  total Decimal @db.Decimal(10,2)
  status orderStatus @default(PENDING)
  payment Payment?
  address Address? @relation(fields:[addressId],references:[id])
  addressId String?
  createdAt DateTime @default(now())
}